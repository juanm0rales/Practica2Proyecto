 /*          10/08/2021 BOGOTÁ, D.C. PONTIFICIA UNIVERSIDAD JAVERIANA          *
 *                        PROYECTO EN ELECTRÓNICA II                           *
 *                          MAIN CODE, INTERRUPT MODE                            *
 *             AUTORES:JAVIER IBÁÑEZ-JUAN MORALES-ALEJANDRO ARIZA              */

//DEFINICIÓN DE LIBRERIAS Y ARCHIVOS .H
#include <xc.h> //LIBRERIA PARA EL COMPILADOR 
#include <stdio.h>//LIBRERIA PARA NAVEGACIÓN ENTRE ARCHIVOS .H 
#define	configINTERRUPT//NOMBRE DEL ARCHIVO .H

//FUNCIÓN DE CONFIGURACIÓN
void configutation(){
// CONFIGURACIÓN DE LA PALABRA 1 Y 2
#pragma config FOSC = INTOSC 	 // OSCILADOR INTERNO SELECCIONADO
#pragma config WDTE = OFF        // WATCHDOG TIMER SIEMPRE ENCENDIDO
#pragma config PWRTE = OFF   	 // PWRT DESHABILITADO DOS VELOCIDADES PERIFERICO EXTERNO
#pragma config MCLRE = ON    	 // MCLR CONFIGURADO A VPP=5V SIENDO EL PIN PARA RESETEAR
#pragma config CP = OFF      	 // FLASH PROGRAM MEMORY CODE PROTECTION, PROTECCIÓN DEL CODIGO DESHABILITADA
#pragma config CPD = OFF         // DATA MEMORY CODE PROTECTION, PROTECCIÓN DESHABILITADA
#pragma config BOREN = OFF   	 // BROWN-OUT RESET ENABLE, CIRCUITO QUE MANTIENE EN RESET CON UN MINIMO VPP
#pragma config CLKOUTEN = OFF    // CLOCK OUT ENABLE, LECTURA DE RELOJ CON PIN DIGITAL
#pragma config IESO = ON    	 // INTERNAL/EXTERNAL SWITCHOVER, DOS VELOCIDADES PARA OSCILADOR
#pragma config FCMEN = OFF       // FAIL-SAFE CLOCK MONITOR, MONITOR DE RELOJ EXTERNO EN CASO DE FALLAS
#pragma config WRT = OFF    	 // FLASH MEMORY SELF-WRITE PROTECTION, PROTECCIÓN DE CONTRAESCRITURA
#pragma config PLLEN = OFF       // PPLL ENABLE - 4X PLL DISABLED, PARA MÁS VELOCIDAD EN EL RELOJ
#pragma config STVREN = ON       // STACK OVERFLOW/UNDERFLOW RESET, STACK OVERFLOW PARA RESET
#pragma config BORV = LO         // BROWN-OUT RESET VOLTAGE SELECTION, NIVEL DE VOLTAGE PARA RESET
#pragma config LVP = ON          // LOW-VOLTAGE PROGRAMMING ENABLE, NIVEL BAJO DE VOLTAJE PARA PROGRAMACIÓN

//CONFIGURACIÓN DEL OSCILADOR
OSCCONbits.IRCF=0b1011;          //FRECCUENCIA DEL OSCILADOR EN 2MHz 
OSCCONbits.SCS=0b00;             //OSCILADOR INTERNO SELECCIONADO
OSCCONbits.SPLLEN=1;             //PLL DESHABILITADO PARA MAYOR VELOCIDAD

// CONFIGURACIÓN DE LOS PUERTOS
TRISA = 0b00000000;              //DEFINICIÓN DE ENTRADAS Y SALIDAS EN LOS PINES
ANSELA = 0b00000000;             //CONFIGURACIÓN DE PINES ANOLOGICOS Y DIGITALES
TRISB = 0b00001000;              //DEFINICIÓN DE ENTRADAS Y SALIDAS EN LOS PINES
ANSELB = 0b00001000;             //CONFIGURACIÓN DE PINES ANOLOGICOS Y DIGITALES

//CONFIGURACIÓN DEL MODULO ADC
ADCON1bits.ADFM = 1;             //RESULTADO JUSTIFICADO A DERECHA
ADCON1bits.ADCS = 000;           //PREESCALIZACIÓN DE FRECUENCIA DE ADC (250kHz)
ADCON1bits.ADNREF = 0;           //REFERENCIA NEGATIVA DE VOLTAJE PARA EL ADC
ADCON1bits.ADPREF = 00;          //REFERENCIA POSITIVA DE VOLTAJE PARA EL ADC
ADCON0bits.CHS = 0b01001;        //SELECCIÓN DEL CANAL POR EL PIN RB3
ADCON0bits.ADON = 1;             //HABILITACIÓN DEL ADC (LISTO PARA OPERAR)
PIR1bits.ADIF = 0;               //LIMPIEZA DE BANDERA DEL ADC

//CONFIGURACIÓN DEL TIMER 1
TMR1 = 63535;                   //CONTEO DE 2000 CICLOS DE PERIODO 2us PARA TENER 2ms CADA BANDERA
T1CONbits.TMR1CS = 0b01;        //LA VELOCIDAD DEL TIMER1 ES FOSC QUE ES 4MHz
T1CONbits.T1CKPS = 0b00;        //EL TIMER CON PREESCALIZACION 1:1
T1CONbits.T1OSCEN = 0;          //CIRCUITO OSCILADOR NO DEDICADO A TIMER 1
T1CONbits.nT1SYNC = 1;          //RELOJ EXTERNO NO SINCRONIZADO
T1CONbits.TMR1ON  = 1;          //HABILITACIÓN PARA QUE EMPIECE A FUNCIONAR EL TIMER
PIR1bits.TMR1IF = 0;            //IMPIEZA DE BANDERA DEL TIMER 1

//CONFIGURACIÓN DE LA EUSART
TXSTAbits.TXEN = 1;         	//BIT DE HABILITACIÓN PARA TRANSMITIR
TXSTAbits.SYNC = 0;             //TRANSMISIÓN ASINCRONA
TXSTAbits.BRGH = 1;         	//MODO ASINCRONO CON ALTA VELOCIDAD
RCSTAbits.SPEN = 1;         	//PUERTO SERIAL HABILITADO
BAUDCONbits.BRG16 = 0;          //GENERADOR DE TASA DE BAUDIOS DE 8 BITS
SPBRG = 6;                    	//TASA DE BAUDIOS=((FOSC/BAUDRATE)/64)-1

//INTERRUPCIONES   
PIE1bits.TMR1IE = 1;            //INTERRUPCIONES DEL TIMER1 HABILITADAS
PIE1bits.ADIE   = 1;            //INTERRUPCIONES DEL ADC HABILITADAS
INTCONbits.GIE  = 1;            //INTERRUPCIONES GLOBALES HABILITADAS
INTCONbits.PEIE = 1;            //INTERRUPCIONES DE PERIFERICOS HABILITADAS
}

